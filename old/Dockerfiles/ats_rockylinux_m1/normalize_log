#!/usr/bin/env python3

import argparse
import re
import sys

class BaseNormalizer:
    def normalize(self, line):
        raise NotImplementedError("A base class should have implemented this.")

class LineNumberNormalizer(BaseNormalizer):
    compiled = re.compile(r'<(\S+):(\d+) \((\S+)\)>')

    def normalize(self, line):
        """
        >>> n = LineNumberNormalizer()
        >>> n.normalize('[Dec  6 16:32:37.775] [ET_NET 3] DEBUG: <HttpSessionAccept.cc:49 (accept)> (http_seq) [HttpSessionAccept:mainEvent 0x7fedf803ebf0] accepted connection from 127.0.0.1:52672 transport type = 1')
        '[Dec  6 16:32:37.775] [ET_NET 3] DEBUG: <HttpSessionAccept.cc:NNN (accept)> (http_seq) [HttpSessionAccept:mainEvent 0x7fedf803ebf0] accepted connection from 127.0.0.1:52672 transport type = 1'
        """
        return self.compiled.sub(r'<\1:NNN (\3)>', line)

class PortNormalizer(BaseNormalizer):
    compiled = re.compile(r'\s(\d+\.\d+\.\d+\.\d+):\d+\s')

    def normalize(self, line):
        """
        >>> n = PortNormalizer()
        >>> n.normalize('[Dec  6 16:32:37.775] [ET_NET 3] DEBUG: <HttpSessionAccept.cc:49 (accept)> (http_seq) [HttpSessionAccept:mainEvent 0x7fedf803ebf0] accepted connection from 127.0.0.1:52672 transport type = 1')
        '[Dec  6 16:32:37.775] [ET_NET 3] DEBUG: <HttpSessionAccept.cc:49 (accept)> (http_seq) [HttpSessionAccept:mainEvent 0x7fedf803ebf0] accepted connection from 127.0.0.1:PPPPP transport type = 1'
        """
        return self.compiled.sub(r' \1:PPPPP ', line)

class PointerNormalizer(BaseNormalizer):
    compiled = re.compile(r'0x[0-9a-fA-F]+')

    def normalize(self, line):
        """
        >>> n = PointerNormalizer()
        >>> n.normalize('[Dec  6 16:32:37.775] [ET_NET 3] DEBUG: <HttpSessionAccept.cc:49 (accept)> (http_seq) [HttpSessionAccept:mainEvent 0x7fedf803ebf0] accepted connection from 127.0.0.1:52672 transport type = 1')
        '[Dec  6 16:32:37.775] [ET_NET 3] DEBUG: <HttpSessionAccept.cc:49 (accept)> (http_seq) [HttpSessionAccept:mainEvent 0xPPPPPPPPPPPP] accepted connection from 127.0.0.1:52672 transport type = 1'
        """
        if r'0x' not in line:
            return line
        return self.compiled.sub('0xPPPPPPPPPPPP', line)

class ThreadNormalizer(BaseNormalizer):
    compiled = re.compile(r'\[ET_\w+\s+\d+]')

    def normalize(self, line):
        """
        >>> n = ThreadNormalizer()
        >>> n.normalize('[Dec  6 16:32:37.685] traffic_server DEBUG: <HttpConfig.cc:84 (http_config_enum_search)> (http_config) enum element thread')
        '[Dec  6 16:32:37.685] traffic_server DEBUG: <HttpConfig.cc:84 (http_config_enum_search)> (http_config) enum element thread'
        >>> n.normalize('[Dec  6 16:32:37.752] [ET_NET 2] DEBUG: <traffic_server.cc:865 (CB_After_Cache_Init)> (http_listen) Delayed listen enable, cache initialization finished')
        '[Dec  6 16:32:37.752] [THREAD N] DEBUG: <traffic_server.cc:865 (CB_After_Cache_Init)> (http_listen) Delayed listen enable, cache initialization finished'
        >>> n.normalize('[148 +++++++++ Incoming O.S. Response +++++++++]')
        '[148 +++++++++ Incoming O.S. Response +++++++++]'
        """
        if '[ET_' not in line:
            return line
        return self.compiled.sub('[THREAD N]', line)


class TimestampNormalizer(BaseNormalizer):
    compiled = re.compile(r'\[\w+\s+\d+\s+\d+:\d+:\d+\.\d+]')

    def normalize(self, line):
        """
        >>> n = TimestampNormalizer()
        >>> n.normalize('[Dec  6 16:33:01.175] [ET_NET 3] DEBUG: <HdrHeap.cc:55 (obj_describe)> (http) URL 0x7fcad5f2fb08: [T: 2, L:  112, OBJFLAGS: 0]')
        '[MMM DD HH:MM::ss.ss] [ET_NET 3] DEBUG: <HdrHeap.cc:55 (obj_describe)> (http) URL 0x7fcad5f2fb08: [T: 2, L:  112, OBJFLAGS: 0]'
        >>> n.normalize('148 +++++++++ Incoming O.S. Response +++++++++')
        '148 +++++++++ Incoming O.S. Response +++++++++'
        >>> n.normalize('[148 +++++++++ Incoming O.S. Response +++++++++]')
        '[148 +++++++++ Incoming O.S. Response +++++++++]'
        """
        if line[0] != '[':
            return line
        return self.compiled.sub('[MMM DD HH:MM::ss.ss]', line)

class Normalizer:
    def __init__(self):
        self._normalizers = []
        self._add_normalizer(LineNumberNormalizer())
        self._add_normalizer(PortNormalizer())
        self._add_normalizer(PointerNormalizer())
        self._add_normalizer(ThreadNormalizer())
        self._add_normalizer(TimestampNormalizer())

    def _add_normalizer(self, normalizer):
        self._normalizers.append(normalizer)

    def normalize(self, line):
        """
        >>> n = Normalizer()
        >>> n.normalize('[Dec  6 16:33:01.175] [ET_NET 3] DEBUG: <HdrHeap.cc:55 (obj_describe)> (http) URL 0x7fcad5f2fb08: [T: 2, L:  112, OBJFLAGS: 0]')
        '[MMM DD HH:MM::ss.ss] [THREAD N] DEBUG: <HdrHeap.cc:NNN (obj_describe)> (http) URL 0xPPPPPPPPPPPP: [T: 2, L:  112, OBJFLAGS: 0]'
        """
        for normalizer in self._normalizers:
            line = normalizer.normalize(line)
        return line

def parse_args():
    parser = argparse.ArgumentParser(
            description='Given the debug logs, normalize them for diffing. '
                        'Timestamps and pointer values, for instance, are '
                        'normalized.')

    parser.add_argument(
            'logs',
            metavar='log',
            type=str,
            nargs='+',
            help='The set of log files to normalize.')

    return parser.parse_args()


def main():
    args = parse_args()

    normalizer = Normalizer()
    for log in args.logs:
        normalized_content = ''
        for line in open(log, 'rt'):
            normalized_content += normalizer.normalize(line)

        with open(log, 'wt') as f:
            f.write(normalized_content)

    return 0

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    sys.exit(main())
